/**
 * API Service for Quickfolio
 * 
 * This module handles communication between the frontend and the Quickfolio API.
 */

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

/**
 * Interface for resume upload response
 */
export interface ResumeUploadResponse {
  session_id: string;
  resume_data: Record<string, any>;
  message: string;
}

/**
 * Interface for content generation response
 */
export interface ContentGenerationResponse {
  session_id: string;
  content: Record<string, any>;
  message: string;
}

/**
 * Interface for deployment response
 */
export interface DeploymentResponse {
  deployment_url: string;
  repository_url: string;
  message: string;
}

/**
 * API Client for Quickfolio
 */
export const api = {
  /**
   * Upload a resume PDF file
   * 
   * @param file Resume PDF file
   * @returns Promise with the parsed resume data
   */
  uploadResume: async (file: File): Promise<ResumeUploadResponse> => {
    const formData = new FormData();
    formData.append('resume_file', file);
    
    const response = await fetch(`${API_BASE_URL}/upload-resume`, {
      method: 'POST',
      body: formData,
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || 'Error uploading resume');
    }
    
    return response.json();
  },
  
  /**
   * Generate enhanced content from resume data
   * 
   * @param sessionId Session ID from resume upload
   * @param resumeData Resume data from upload
   * @param tone Content tone (professional, creative, etc.)
   * @returns Promise with generated content
   */
  generateContent: async (
    sessionId: string,
    resumeData: Record<string, any>,
    tone: string = 'professional'
  ): Promise<ContentGenerationResponse> => {
    const formData = new FormData();
    formData.append('session_id', sessionId);
    formData.append('resume_data', JSON.stringify(resumeData));
    formData.append('tone', tone);
    
    const response = await fetch(`${API_BASE_URL}/generate-content`, {
      method: 'POST',
      body: formData,
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || 'Error generating content');
    }
    
    return response.json();
  },
  
  /**
   * Initiate GitHub OAuth flow
   * 
   * @returns GitHub OAuth URL
   */
  getGitHubAuthUrl: (): string => {
    return `${API_BASE_URL}/github/login`;
  },
  
  /**
   * Deploy portfolio to GitHub Pages
   * 
   * @param accessToken GitHub OAuth access token
   * @param resumeData Resume data
   * @param generatedContent Content generated by AI
   * @param theme Theme to use for portfolio
   * @returns Promise with deployment information
   */
  deployPortfolio: async (
    accessToken: string,
    resumeData: Record<string, any>,
    generatedContent: Record<string, any>,
    theme: string = 'minimal'
  ): Promise<DeploymentResponse> => {
    const formData = new FormData();
    formData.append('access_token', accessToken);
    formData.append('resume_data', JSON.stringify(resumeData));
    formData.append('generated_content', JSON.stringify(generatedContent));
    formData.append('theme', theme);
    
    const response = await fetch(`${API_BASE_URL}/deploy`, {
      method: 'POST',
      body: formData,
    });
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || 'Error deploying portfolio');
    }
    
    return response.json();
  },
  
  /**
   * Get list of available themes
   * 
   * @returns Promise with themes list
   */
  getThemes: async (): Promise<{themes: string[]}> => {
    const response = await fetch(`${API_BASE_URL}/themes`);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.detail || 'Error fetching themes');
    }
    
    return response.json();
  }
};

export default api;
